akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "debug"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = local

    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "java.lang.String" = java
      "com.google.protobuf.Message" = proto
    }

  }

  # For the sample, just bind to loopback and do not allow access from the network
  # the port is overridden by the logic in main class
  remote.artery {
    enabled = on
    transport = tcp
    canonical.port = 2551
    canonical.hostname = 127.0.0.1
  }

  cluster {
    min-nr-of-members = 2
    seed-nodes = [
      "akka://simona@127.0.0.1:2551", "akka://simona@127.0.0.1:2552", "akka://simona@127.0.0.1:2553"]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #auto-down-unreachable-after = 10s
    #    min-nr-of-members = 2

    sharding {
      # Rebalance check is performed periodically with this interval.
      rebalance-interval = 10 s
    }
  }

  coordinated-shutdown {
    phases {
      actor-system-terminate {
        timeout = 500 s // increased to allow file operations to terminate!
        depends-on = [before-actor-system-terminate]
      }
    }

  }
}