#@define
VoltLvlConfig {
  id: string    # identifier of the voltage level
  vNom: string  # nominal voltage, expl.: 10 kV
}

#@define
RefSystemConfig {
  sNom: string                # Nominal power, expl.: 600 kVA
  vNom: string                # Nominal voltage, expl.: 0.4 kV
  #@optional
  voltLvls: [VoltLvlConfig]   # Voltage levels to apply to
  #@optional
  gridIds: [string]           # Sub grid numbers to apply to, expl.: 1,2,4..10
}

#@define abstract extends !java.io.Serializable
BaseRuntimeConfig {
  uuids: [string]          # Unique id to identify the system participant models this config applies for
  scaling: double          # General scaling factor of the system participant model
  calculateMissingReactivePowerWithModel: boolean # When receiving primary data: Fill up with 0 or model func
}

#@define extends BaseRuntimeConfig
LoadRuntimeConfig {
  baseRuntimeConfig: BaseRuntimeConfig
  modelBehaviour: string  # How the model behaves. Possible values: fix, profile, random
  reference: string       # Scaling reference for the load model. Possible values: power, energy
}

#@define extends BaseRuntimeConfig
FixedFeedInRuntimeConfig {
  baseRuntimeConfig: BaseRuntimeConfig # this entry is ignored by the config generator,
  # but cannot removed bc otherwise FixedFeedInRuntimeConfig is handled as String
}

#@define extends BaseRuntimeConfig
PvRuntimeConfig {
  baseRuntimeConfig: BaseRuntimeConfig # this entry is ignored by the config generator,
  # but cannot removed bc otherwise PvRuntimeConfig is handled as String
}

#@define extends BaseRuntimeConfig
WecRuntimeConfig {
  baseRuntimeConfig: BaseRuntimeConfig # this entry is ignored by the config generator,
  # but cannot removed bc otherwise WecRuntimeConfig is handled as String
}

#@define extends BaseRuntimeConfig
EvcsRuntimeConfig {
  baseRuntimeConfig: BaseRuntimeConfig # this entry is ignored by the config generator,
  # but cannot removed bc otherwise EvcsRuntimeConfig is handled as String
}

#@define
BaseOutputConfig {
  notifier: string           # Result event notifier
  powerRequestReply: boolean # Inform listeners about power request replies
  simulationResult: boolean  # Inform listeners about new participant simulation result
}

#@define
GridOutputConfig {
  notifier: string         # Result event notifier
  nodes: boolean | false
  lines: boolean | false
  switches: boolean | false
  transformers2w: boolean | false
  transformers3w: boolean | false
}

##################################################################
# Agentsim
##################################################################
simona.simulationName = "string"
simona.time.startDateTime = "2011-05-01 00:00:00"
simona.time.endDateTime = "2011-05-01 01:00:00"
simona.time.stopOnFailedPowerFlow = boolean | false
#@optional
simona.time.schedulerReadyCheckWindow = int

##################################################################
# Input Parameters
##################################################################
simona.input.primary = {
    #@optional
    csvParams = {
      folderPath: "string"
      csvSep: "string"
      timePattern: string | "yyyy-MM-dd'T'HH:mm:ss[.S[S][S]]'Z'" # default pattern from PSDM:TimeBasedSimpleValueFactory
    }
    #@optional
    influxDb1xParams = {
      url:  string
      port: Int
      database: string
      timePattern: string | "yyyy-MM-dd'T'HH:mm:ss[.S[S][S]]'Z'" # default pattern from PSDM:TimeBasedSimpleValueFactory
    }
    #@optional
    sqlParams = {
      jdbcUrl:  string
      userName: string
      password: string
      schemaName: string | "public"
      timePattern: string | "yyyy-MM-dd'T'HH:mm:ss[.S[S][S]]'Z'" # default pattern from PSDM:TimeBasedSimpleValueFactory
    }
    #@optional
    couchbaseParams = {
      url:  string
      bucketName:  string
      userName: string
      password: string
      coordinateColumnName: string
      keyPrefix: string
      timePattern: string | "yyyy-MM-dd'T'HH:mm:ss[.S[S][S]]'Z'" # default pattern from PSDM:TimeBasedSimpleValueFactory
    }
}
simona.input.grid.datasource.id = "string"
#@optional
simona.input.grid.datasource.csvParams = {
  folderPath: "string"
  csvSep: "string"
}
simona.input.weather.datasource = {

    scheme = "string" | "icon" # Describes the scheme, in which the data comes. Permissible values : icon, cosmo
    #@optional
    sampleParams = {
      use: "boolean" | true # dummy parameter to allow sample data
    }
    #@optional
    timestampPattern = string
    #@optional
    resolution = long
    #@optional
    csvParams = {
      folderPath: "string"
      csvSep: "string"
    }
    #@optional
    influxDb1xParams = {
      url:  string
      port: Int
      database: string
    }
    #@optional
    sqlParams = {
      jdbcUrl:  string
      userName: string
      password: string
      tableName: string
      schemaName: string | "public"
    }
    #@optional
    couchbaseParams = {
      url:  string
      bucketName:  string
      userName: string
      password: string
      coordinateColumnName: string
      keyPrefix: string
    }

    coordinateSource = {
        gridModel = "string" | "icon"
        #@optional
        csvParams = {
          folderPath: "string"
          csvSep: "string"
          }
      #@optional
      sampleParams = {
        use: "boolean" | true # dummy parameter to allow sample data
      }
    }
}
##################################################################
# Output Parameters
##################################################################
simona.output.base {
  dir = string
  addTimestampToOutputDir = true
}

#@optional
simona.output.sink.csv {
  fileFormat = ".csv"
  filePrefix = ""
  fileSuffix = ""
}
#@optional
simona.output.sink.influxDb1x {
  url =  string
  port = Int
  database = string
}

simona.output.grid = GridOutputConfig
simona.output.participant = {
  defaultConfig = BaseOutputConfig
  individualConfigs = [BaseOutputConfig]
}

##################################################################
# Runtime Configuration // todo refactor as this naming is misleading
##################################################################
#@optional
simona.runtime.selected_subgrids = [int] // todo convert this into a list of objects with startId, endId to allow for ranges and multiple ranges
#@optional
simona.runtime.selected_volt_lvls = [VoltLvlConfig]

simona.runtime.participant = {
  requestVoltageDeviationThreshold = "double | 1E-14" # Nodal voltages deviating more than this between requests in the same tick, are considered being different
  load = {
    defaultConfig = LoadRuntimeConfig # Mandatory default config (uuids are ignored, best provide "default")
    individualConfigs = [LoadRuntimeConfig]
  }
  pv = {
    defaultConfig = PvRuntimeConfig
    individualConfigs = [PvRuntimeConfig]
  }
  fixedFeedIn = {
    defaultConfig = FixedFeedInRuntimeConfig # Mandatory default config (uuids are ignored, best provide "default")
    individualConfigs = [FixedFeedInRuntimeConfig]
  }
  wec = {
    defaultConfig = WecRuntimeConfig # Mandatory default config (uuids are ignored, best provide "default")
    individualConfigs = [WecRuntimeConfig]
  }
  evcs = {
    defaultConfig = EvcsRuntimeConfig # Mandatory default config (uuids are ignored, best provide "default")
    individualConfigs = [EvcsRuntimeConfig]
  }
}

##################################################################
# Power Flow Configuration
##################################################################
simona.powerflow.maxSweepPowerDeviation = Double // the maximum allowed deviation in power between two sweeps, before overall convergence is assumed
simona.powerflow.sweepTimeout = "duration:seconds | 30 seconds" // maximum timeout for a sweep
simona.powerflow.newtonraphson.epsilon = [Double]
simona.powerflow.newtonraphson.iterations = Int
simona.powerflow.resolution = "duration:seconds | 1 hour"


##################################################################
# Grid Configuration
##################################################################

simona.gridConfig.refSystems = [RefSystemConfig]

##################################################################
# Event Configuration
##################################################################
#@optional
simona.event.listener = [
  {
    fullClassPath = string
    #@optional
    eventsToProcess = [string]
  }
]
