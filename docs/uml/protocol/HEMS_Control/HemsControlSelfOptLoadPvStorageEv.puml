@startuml
title Use Case Optimize Self Consumption \n Existing: LoadAgent, HomeStorage, PV, EV \n Missing: -
group to be discussed
    HEMS -> HEMS: a. Charge EV before HomeStorage \n b. first HomeStorage then EV \n c. both at same time?
        end
group init
LoadAgent -> HEMS: Demand
PVAgent -> HEMS: PVInput
EvcsAgent1 -> HEMS: SoC, Demand, (FlexibilityOffer)
HomeStorageAgent -> HEMS: SoC
end
alt#Gold #LightBlue Load <= Production
group#Gold #LightBlue Increase Load until Production
    HEMS -> HEMS: while: Load <= Production \n do increase load stepwise \n 1. while SoC EV < 1: addPower max [(PowerPVInput - LoadAgent) || PowerRatedEV] \n 2. while SoC HomeStorage < 1: max [(PowerPVInput - LoadAgent - PowerRatedEV) || PowerRatedHomeStorage])
    HEMS -> EvcsAgent1: increasePower
    HEMS -> HomeStorageAgent: increasePower
    alt#Gold if ResidualLoad > 0
    HEMS -> GridAgent: Feed-in =  PVInput - PowerDemandLoadAgent - ChargePowerEvcsAgent1 - ChargePowerHomeStorage
    end
    end

else #Pink Load > Production
    group#Gold to be discussed:
    HEMS -> HEMS: General approach:\n Uncharge HomeStorage before Uncharge EV
    HEMS -> HEMS: Charge Car?\n 1. Simple: no. \n 2. Fullfill charging demand of car as normal \n 3. Check weather forecast for charging car?
    HEMS -> HEMS: Uncharge Car?\n 1. Simple: no \n 2. Check driving demand or level and uncharge still SoC X \n 3. Weather forecast and optimal solution
    end
    group#Gold #LightBlue Fulfill all demands, do not uncharge EV
    HEMS -> LoadAgent: No curtailment of PowerDemandLoadAgent
    HEMS -> EvcsAgent1: Fullfil PowerDemandEvcsAgent1
    HEMS -> HomeStorageAgent: while SoC HomeStorage > 0: Uncharge HomeStorage with UnchargePowerHomestorage = min [PowerDemandLoadAgent + PowerDemandEvcsAgent1 - PVInput || RatedPowerHomestorage]
    alt#Gold if ResidualLoad > 0
    HEMS -> GridAgent: PowerDemand = PowerDemandLoadAgent + PowerDemandEvcsAgent1 - UnchargePowerHomestorage - PVInput
    end
end
@enduml



