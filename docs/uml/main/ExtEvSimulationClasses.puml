@startuml
'https://plantuml.com/class-diagram
skinparam linetype ortho
skinparam nodesep 50
skinparam ranksep 40

skinparam node {
    borderColor Transparent
    fontColor Transparent
}

package MobilitySimulator {
    class ExtLink
    class MobilitySim
    class ElectricVehicle
}

package simona-api {

    abstract class ExtSimulation {
        - ExtSimAdapterData data
        + void setup(ExtSimAdapterData data, List<ExtData> adapters)
        + void run()
        # {abstract} Optional<Long> doActivity(long tick)
        # {abstract} Long initialize()
    }
    ExtSimulation --r> ExtData
    MobilitySim -|> ExtSimulation

    interface ExtLinkInterface {
        + ExtSimulation getExtSimulation()
        + List<ExtDataSimulation> getExtDataSimulations()
    }

    ExtLink --|> ExtLinkInterface

    interface ExtEvSimulation {
       + void setExtEvData(ExtEvData evData)
    }

    MobilitySim --|> ExtEvSimulation

    interface ExtDataSimulation

    ExtEvSimulation --u|> ExtDataSimulation

    interface EvModel {
            + UUID getUuid()
            + String getId()
            + ComparableQuantity<Power> getSRatedAC()
            + ComparableQuantity<Power> getSRatedDC()
            + ComparableQuantity<Energy> getEStorage()
            + ComparableQuantity<Energy> getStoredEnergy()
            + Long getDepartureTick()
            + EvModel copyWith(ComparableQuantity<Energy> newStoredEnergy)
    }

    ElectricVehicle --|> EvModel

    interface ExtData

    class ExtEvData {
            + LinkedBlockingQueue<EvDataResponseMessageToExt> receiveTriggerQueue
            - ActorRef dataService
            - ActorRef extSimAdapter
            + Map<UUID, Integer> requestAvailablePublicEvcs()
            + Map<UUID, Double> requestCurrentPrices()
            + List<EvModel> requestDepartingEvs(Map<UUID, List<UUID>> departures)
            + void provideArrivingEvs(Map<UUID, List<EvModel>> arrivals, Optional<Long> maybeNextTick)
            + void sendExtMsg(EvDataMessageFromExt msg)
            + void queueExtResponseMsg(EvDataResponseMessageToExt extEvResponse)
    }

    node sub2 {
        interface EvDataMessageFromExt

        interface DataMessageFromExt

        class ProvideArrivingEvs

        class RequestCurrentPrices

        class RequestDepartingEvs

        class RequestEvcsFreeLots
    }

    RequestDepartingEvs --u|> EvDataMessageFromExt
    RequestEvcsFreeLots --u|> EvDataMessageFromExt
    ProvideArrivingEvs --u|> EvDataMessageFromExt
    RequestCurrentPrices --u|> EvDataMessageFromExt

    DataMessageFromExt --d|> EvDataMessageFromExt
    ExtEvData -----> EvDataMessageFromExt
    ExtEvData --u|> ExtData
    ExtEvSimulation -u> ExtEvData

    node sub1 {
        interface DataResponseMessageToExt

        interface EvDataResponseMessageToExt

        class ProvideCurrentPrices {
            + Map<UUID, Double> prices
        }

        class ProvideDepartingEvs {
            + List<EvModel> departedEvs
        }

        class ProvideEvcsFreeLots {
             + Map<UUID, Integer> evcs
        }

         ProvideEvcsFreeLots --|> EvDataResponseMessageToExt
         ProvideDepartingEvs --|> EvDataResponseMessageToExt
         ProvideCurrentPrices --|> EvDataResponseMessageToExt
         ExtEvData --> EvDataResponseMessageToExt
         EvDataResponseMessageToExt --|> DataResponseMessageToExt
    }

    node sub3 {
        class ExtSimAdapterData {
                    + LinkedBlockingQueue<ExtTrigger> receiveTriggerQueue
                    - ActorRef extSimAdapter
                    - String[] mainArgs
                    + void queueExtMsg(ControlMessageToExt msg)
                    + void send(ControlResponseMessageFromExt msg)
                    + String[] getMainArgs()
        }

        interface ControlMessageToExt

        interface ControlResponseMessageFromExt

        class CompletionMessage

        class ActivationMessage

        ExtSimAdapterData --u> ControlMessageToExt
        ExtSimAdapterData --u> ControlResponseMessageFromExt
        CompletionMessage --d|> ControlResponseMessageFromExt
        ActivationMessage --d|> ControlMessageToExt
        ExtSimulation -----> ExtSimAdapterData
    }

}

package simona {
    abstract class ParticipantAgent

    class EvcsModel

    class EvcsAgent

    interface SecondaryData

    class ArrivingEvs {
        + arrivals: Seq[EvModelWrapper]
    }

    class DepartingEvsRequest {
        + evcs: UUID
        + departingEvs: Seq[EvModelWrapper]
    }

    class EvFreeLotsRequest {
        + freeLots: Int
    }

    abstract EvData

    class SimonaSim

    class Scheduler

    class SimonaStandaloneSetup

    class ExtSimLoader

    class ExtSimAdapter

    class ExtEvDataService

    Scheduler -- SimonaSim
    SimonaSim *- SimonaStandaloneSetup
    SimonaStandaloneSetup *- ExtSimLoader

    ExtSimAdapter - Scheduler
    ExtEvDataService -- Scheduler

    ArrivingEvs --u|> EvData
    EvFreeLotsRequest --u|> EvData
    DepartingEvsRequest --u|> EvData
    SecondaryData <|-- EvData

    SimonaService <|- ExtEvDataService
    ExtEvData --- ExtEvDataService

    ExtSimAdapterData <--- ExtSimAdapter

    ExtEvDataService "n" <-> "1" EvcsAgent
    EvcsAgent --|> ParticipantAgent
    EvcsAgent *- EvcsModel

}

'Order of classes/interfaces established through hidden connections:

ExtSimAdapter -[hidden]> SimonaService
sub1 ---[hidden]d> sub2
ExtLink -[hidden]> ElectricVehicle
ExtSimulation -[hidden]> ExtEvSimulation
ExtSimulation -[hidden]> DataResponseMessageToExt
ProvideArrivingEvs --[hidden]> ExtSimAdapter

@enduml